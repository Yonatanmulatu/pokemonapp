{"version":3,"sources":["logo.svg","components/Pokemon.js","components/Pokemons.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pokemon","this","props","pokemon","name","to","src","img","type","React","Component","Pokemons","ProfileArray","pokemons","filter","types","includes","map","Profile","App","id","className","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d6bf1ad8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Router, Link, Route} from 'react-router-dom';\n\nclass Pokemon extends React.Component {\n    render() {\n        return(\n            <tr>\n                <td>{this.props.pokemon.name}</td>\n                <td><Link to={\"/\"+this.props.pokemon.name}><img src={this.props.pokemon.img}/></Link></td>\n                <td>{this.props.type}</td>\n            </tr>\n        )\n    }\n}\n\nexport default Pokemon;","import React from 'react';\nimport Pokemon from './Pokemon';\n\nclass Pokemons extends React.Component {\n\n    ProfileArray = this.props.pokemons.filter( pokemon => {\n      return pokemon.types.includes(this.props.type)\n    });\n\n  render () {\n\n    return (\n        <div>\n            {\n            this.ProfileArray.map(pokemon => {\n                return <Pokemon pokemon={pokemon}/>\n            })\n            }\n        </div>\n    );\n\n  }\n}\n\nexport default Pokemons;\n","import React from 'react';\nimport Pokemon from './Pokemon';\nimport { Router, Link, Route} from 'react-router-dom';\nimport Pokemons from './Pokemons';\n\nclass Profile extends React.Component {\n\n  render () {\n    return (\n        <table>\n            <thead>\n                <tr>\n                <th>{this.props.pokemon.name}</th>\n                </tr>\n                <tr> \n                    {\n                        this.props.pokemon.types.map(type => {\n                            return type\n                    })\n                    }\n                </tr>\n            </thead> \n            <tr>\n                <td><img src={this.props.pokemon.img}/></td>\n            </tr>\n        </table>\n    );\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import Player from './components/Player';\nimport Pokemon from './components/Pokemon';\nimport { Router, Link, Route} from 'react-router-dom';\nimport Pokemons from './components/Pokemons';\nimport Profile from './components/Profile';\n\nclass App extends React.Component {\n    // const players = [ \n    //   { name: \"Jordan\", jerseyNumber: \"23\"},\n    //   { name: \"James\", jerseyNumber: \"23\"},\n    //   { name: \"Bryant\", jerseyNumber: \"24\"}\n    // ];\n\n    pokemons = [\n      {\n        name: \"Bulbasaur\",\n        id: \"#001\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/bulbasaur.png\",\n        types: [\"Grass\",\"Poison\"]\n      },\n      {\n        name: \"Ivysaur\",\n        id: \"#002\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/ivysaur.png\",\n        types: [\"Grass\",\"Poison\"]\n      },\n      {\n        name: \"Venusaur\",\n        id: \"#003\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/venusaur.png\",\n        types: [\"Grass\",\"Poison\"]\n      },\n      {\n        name: \"Charmander\",\n        id: \"#004\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/charmander.png\",\n        types: [\"Fire\"]\n      },\n      {\n        name: \"Charmeleon\",\n        id: \"#005\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/charmeleon.png\",\n        types: [\"Fire\"]\n      },\n      {\n        name: \"Charizard\",\n        id: \"#006\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/charizard.png\",\n        types: [\"Fire\",\"Flying\"]\n      },\n      {\n        name: \"Squirtle\",\n        id: \"#007\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/squirtle.png\",\n        types: [\"Water\"]\n      },\n      {\n        name: \"Caterpie\",\n        id: \"#010\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/caterpie.png\",\n        types: [\"Bug\"]\n      },\n      {\n        name: \"Pidgey\",\n        id: \"#016\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/pidgey.png\",\n        types: [\"Normal\", \"Flying\"]\n      },\n      {\n        name: \"Rattata\",\n        id: \"#019\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/rattata.png\",\n        types: [\"Normal\"]\n      },\n      {\n        name: \"Arbok\",\n        id: \"#024\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/arbok.png\",\n        types: [\"Poison\"]\n      },\n      {\n        name: \"Pikachu\",\n        id: \"#025\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/pikachu-alt2.png\",\n        types: [\"Electric\"]\n      },\n      {\n        name: \"Sandshrew\",\n        id: \"#027\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/sandshrew.png\",\n        types: [\"Ground\"]\n      },\n      {\n        name: \"Jigglypuff\",\n        id: \"#039\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/jigglypuff.png\",\n        types: [\"Fairy\"]\n      },\n      {\n        name: \"Mankey\",\n        id: \"#056\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/mankey.png\",\n        types: [\"Fighting\"]\n      },\n      {\n        name: \"Poliwrath\",\n        id: \"#062\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/poliwrath.png\",\n        types: [\"Water\",\"Fighting\"]\n      },\n      {\n        name: \"Geodude\",\n        id: \"#074\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/geodude.png\",\n        types: [\"Rock\", \"Ground\"]\n      },\n      {\n        name: \"Magnemite\",\n        id: \"#081\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/magnemite.png\",\n        types: [\"Electric\",\"Steel\"]\n      },\n      {\n        name: \"Cloyster\",\n        id: \"#091\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/cloyster.png\",\n        types: [\"Water\",\"Ice\"]\n      },\n      {\n        name: \"Gastly\",\n        id: \"#092\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/gastly.png\",\n        types: [\"Ghost\"]\n      },\n      {\n        name: \"Haunter\",\n        id: \"#093\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/haunter.png\",\n        types: [\"Ghost\",\"Poison\"]\n      },\n      {\n        name: \"Gengar\",\n        id: \"#094\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/gengar.png\",\n        types: [\"Ghost\",\"Poison\"]\n      },\n      {\n        name: \"Scyther\",\n        id: \"#123\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/scyther.png\",\n        types: [\"Bug\", \"Flying\"]\n      },\n      {\n        name: \"Omanyte\",\n        id: \"#138\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/omanyte.png\",\n        types: [\"Rock\", \"Water\"]\n      },\n      {\n        name: \"Aerodactyl\",\n        id: \"#142\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/aerodactyl.png\",\n        types: [\"Flying\"]\n      },\n      {\n        name: \"Articuno\",\n        id: \"#144\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/articuno.png\",\n        types: [\"Ice\",\"Flying\"]\n      },\n      {\n        name: \"Azumarill\",\n        id: \"#184\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/azumarill.png\",\n        types: [\"Water\",\"Fairy\"]\n      },\n      {\n        name: \"Umbreon\",\n        id: \"#197\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/umbreon.png\",\n        types: [\"Dark\"]\n      },\n      {\n        name: \"Murkrow\",\n        id: \"#198\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/murkrow.png\",\n        types: [\"Dark\", \"Flying\"]\n      },\n      {\n        name: \"Forretress\",\n        id: \"#205\",\n        img: \"https://img.pokemondb.net/artwork/vector/large/forretress.png\",\n        types: [\"Bug\", \"Steel\"]\n      },\n    ];\n    types = [\"Normal\", \"Fire\", \"Water\", \"Electric\", \"Grass\", \"Ice\", \"Fighting\", \"Poison\", \"Ground\", \"Flying\", \"Bug\", \"Rock\", \"Ghost\", \"Dark\", \"Steel\", \"Fairy\"]  \n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <ul>\n          {\n            this.types.map(type => {\n                return <li><Link to={\"/\"+type}>{type} |</Link></li>  \n            })\n          }\n        </ul>\n\n          <table>\n              {/* <thead>\n                  <tr>\n                    <th>name</th>\n                    <th>image</th>\n                    <th>type</th>\n                  </tr>\n              </thead> */}\n              <tbody>\n                {\n                  this.types.map(type => {\n                    return (\n                      <Route path={\"/\"+type}>\n                        <Pokemons pokemons={this.pokemons} type={type}/>\n                      </Route>\n                    )\n                  })\n                }\n              </tbody>\n          </table>\n          <div>\n            {\n              this.pokemons.map(pokemon => {\n                return (\n                  <Route path={\"/\"+pokemon.name}>\n                    <Profile pokemon={pokemon}/>\n                  </Route>\n                )\n              })\n            }\n          </div>\n          {/* {\n            players.map( player => { \n  \n              return <Player name = {player.name} jerseyNumber = {player.jerseyNumber}/>\n            })\n          }\n           */}\n        </header>\n      </div>\n    );\n  }\n  }\n\n  export default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router, Link, BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}